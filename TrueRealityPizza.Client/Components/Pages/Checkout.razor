@page "/checkout"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@rendermode InteractiveWebAssembly
@attribute [Authorize]
@inject OrderState OrderState
@inject IJSRuntime JSRuntime
@inject IRepository Repository
@inject NavigationManager NavigationManager


<PageTitle>TrueReality Pizza - 结账</PageTitle>

<div class="main" style="color: white">

    <EditForm EditContext="EditContext" OnValidSubmit="PlaceOrder">

        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>查看订单</h4>
                <OrderReview Order="OrderState.Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>配送到...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>

        </div>

        <button class="btn btn-warning checkout-button " type="submit" style="background: #ffc107;">
            下单
        </button>

        <DataAnnotationsValidator />

    </EditForm>

</div>

@code {

    public EditContext EditContext { get; set; } = new EditContext(new Order());

    protected override void OnInitialized()
    {
        // 在后台，询问是否希望收到订单更新的通知
        _ = RequestNotificationSubscriptionAsync();
    }

    override protected async Task OnAfterRenderAsync(bool first)
    {

        if (first)
        {
            await OrderState.GetStateFromLocalStorage(JSRuntime);

            EditContext = new EditContext(OrderState.Order.DeliveryAddress);
            EditContext.SetFieldCssClassProvider(new BootstrapFieldClassProvider());

            StateHasChanged();
        }

    }

    async Task PlaceOrder()
    {
        var newOrderId = await Repository.PlaceOrder(OrderState.Order);
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }

    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription is not null)
        {
            try
            {
                await Repository.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }
}