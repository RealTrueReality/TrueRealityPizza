@page "/"
@rendermode InteractiveWebAssembly
@inject IRepository PizzaStore
@inject IJSRuntime JSRuntime
@inject OrderState OrderState
@inject NavigationManager NavigationManager


<PageTitle>TrueReality Pizzas</PageTitle>

<div class="main">
	<ul class="pizza-cards">
		@if (specials is not null)
		{
			@foreach (var special in specials)
			{
				<li @onclick="@(()=>OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
					<div class="pizza-info">
						<span class="title">@special.Name</span>
						@special.Description
						<span class="price">@special.GetFormattedBasePrice()</span>
					</div>
				</li>
			}
		}
	</ul>
</div>

<div class="sidebar">
	@if (OrderState.Order.Pizzas.Any())
	{
		<div class="order-contents">
			<h2>您的订单</h2>

			@foreach (var configuredPizza in OrderState.Order.Pizzas)
			{
				<ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemovePizza(configuredPizza))" />
			}
		</div>
	}
	else
	{
		<div class="empty-cart">选择一个披萨<br>开始创建您的订单</div>
	}

	<div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
		总计：
		<span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
		<a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
			下单 >
		</a>
	</div>
</div>

<TrueRealityPizza.ComponentsLibrary.TemplatedDialog Show="OrderState.ShowingConfigureDialog">
	<ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
	                      OnCancel="OrderState.CancelConfigurePizzaDialog"
	                      OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
</TrueRealityPizza.ComponentsLibrary.TemplatedDialog>

@code {
	List<PizzaSpecial>? specials;

	protected override async Task OnInitializedAsync()
	{
		specials = await PizzaStore.GetSpecials();
		OrderState.JSRuntime = JSRuntime;
	}

	async Task RemovePizza(Pizza configuredPizza)
	{
		if (await JSRuntime.Confirm($"从订单中移除 {configuredPizza.Special?.Name} 披萨？"))
		{
			OrderState.RemoveConfiguredPizza(configuredPizza);
		}
	}

}