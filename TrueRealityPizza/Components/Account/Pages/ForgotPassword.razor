@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<PizzaStoreUser> UserManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>忘记密码？</PageTitle>

<h1>忘记密码？</h1>
<h2>请输入您的电子邮件。</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <label for="email" class="form-label">电子邮件</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">重置密码</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(resetLink))
        {
            <div class="mt-4">
                <p>点击下面的链接重置密码：</p>
                <a href="@resetLink">@resetLink</a>
            </div>
        }
     </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? resetLink; // 保存生成的重置密码链接

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // 如果用户不存在或没有确认邮箱，重定向到密码重置确认页面
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
            return;
        }

        // 生成密码重置令牌
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        
        // 生成重置密码的回调 URL
        resetLink = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        // 刷新页面以显示链接
        StateHasChanged();
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "电子邮件是必填项")]
        [EmailAddress(ErrorMessage = "请输入有效的电子邮件地址")]
        public string Email { get; set; }
    }
}
