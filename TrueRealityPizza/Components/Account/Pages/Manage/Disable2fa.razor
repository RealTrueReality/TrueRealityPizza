@page "/Account/Manage/Disable2fa"

@using Microsoft.AspNetCore.Identity

@inject UserManager<PizzaStoreUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Disable2fa> Logger

<PageTitle>禁用双重身份验证 (2FA)</PageTitle>

<StatusMessage />
<h3>禁用双重身份验证 (2FA)</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>此操作只会禁用2FA。</strong>
    </p>
    <p>
        禁用2FA不会更改身份验证器应用中使用的密钥。如果您希望更改身份验证器应用中使用的密钥，您应该 <a href="Account/Manage/ResetAuthenticator">重置您的身份验证器密钥。</a>
    </p>
</div>

<div>
    <form @formname="disable-2fa" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken />
        <button class="btn btn-danger" type="submit">禁用 2FA</button>
    </form>
</div>

@code {
    private PizzaStoreUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        if (HttpMethods.IsGet(HttpContext.Request.Method) && !await UserManager.GetTwoFactorEnabledAsync(user))
        {
            throw new InvalidOperationException("无法禁用2FA，因为它当前未启用。");
        }
    }

    private async Task OnSubmitAsync()
    {
        var disable2faResult = await UserManager.SetTwoFactorEnabledAsync(user, false);
        if (!disable2faResult.Succeeded)
        {
            throw new InvalidOperationException("禁用2FA时发生意外错误。");
        }

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("ID为 '{UserId}' 的用户已禁用2FA。", userId);
        RedirectManager.RedirectToWithStatus(
            "Account/Manage/TwoFactorAuthentication",
            "2FA 已禁用。您可以在设置身份验证器应用时重新启用 2FA",
            HttpContext);
    }
}