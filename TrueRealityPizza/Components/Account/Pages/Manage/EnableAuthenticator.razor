@page "/Account/Manage/EnableAuthenticator"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity

@inject UserManager<PizzaStoreUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

<PageTitle>配置身份验证器应用</PageTitle>
<PageScript Src="./Components/Account/Pages/Manage/EnableAuthenticator.razor.js"/>
@if (recoveryCodes is not null) {
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message"/>
}
else {
    <div class="row">
        <div class="col-md-6">
        <StatusMessage Message="@message"/>
        </div>
    </div>
            <h3>配置身份验证器应用</h3>
            <div>
                <p>要使用身份验证器应用，请按照以下步骤操作：</p>
                <ol class="list">
                    <li>
                        <p>
                            下载双因素身份验证器应用，如适用于
                            <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a> 和
                            <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a> 的 Microsoft Authenticator 或
                            适用于
                            <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a> 和
                            <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a> 的 Google Authenticator。
                        </p>
                    </li>
                    <li>
                        <p>扫描二维码或将此密钥 <kbd>@sharedKey</kbd> 输入到您的双因素身份验证器应用中。空格和大小写不影响。</p>
                        @* <div class="alert alert-info"> *@
                        @*     了解如何 <a href="https://go.microsoft.com/fwlink/?Linkid=852423">启用二维码生成</a>。 *@
                        @* </div> *@
                        <div id="qrCode"></div>
                        <div id="qrCodeData" data-url="@authenticatorUri"></div>
                    </li>
                    <li>
                        <p>
                            扫描二维码或输入上述密钥后，您的双因素身份验证器应用将为您提供一个唯一代码。请在下方确认框中输入该代码。
                        </p>
                        <div class="row">
                            <div class="col-md-6">
                                <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                                    <DataAnnotationsValidator/>
                                    <ValidationSummary class="text-danger" role="alert"/>
                                    <div class="form-floating mb-3">
                                        <label for="code" class="control-label form-label">验证码</label>
                                        <InputText @bind-Value="Input.Code" class="form-control" autocomplete="off" placeholder="请输入验证码。"/>
                                        <ValidationMessage For="() => Input.Code" class="text-danger"/>
                                    </div>
                                    <button type="submit" class="w-100 btn btn-lg btn-primary">验证</button>
                                </EditForm>
                            </div>
                        </div>
                    </li>
                </ol>
            </div>

}

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private PizzaStoreUser user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync() {
        // 去除空格和短横线
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid) {
            message = "错误: 验证码无效。";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("ID为 '{UserId}' 的用户已使用身份验证器应用启用 2FA。", userId);

        message = "您的身份验证器应用已验证。";

        if (await UserManager.CountRecoveryCodesAsync(user) == 0) {
            recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        }
        else {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(PizzaStoreUser user) {
        // 加载身份验证器密钥和二维码 URI 以显示在表单上
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey)) {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private string FormatKey(string unformattedKey) {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length) {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }

        if (currentPosition < unformattedKey.Length) {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey) {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("TrueRealityPizza"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private sealed class InputModel {
        [Required]
        [StringLength(7, ErrorMessage = "{0} 必须至少 {2} 个字符，且最多为 {1} 个字符。", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "验证码")]
        public string Code { get; set; } = "";
    }

}