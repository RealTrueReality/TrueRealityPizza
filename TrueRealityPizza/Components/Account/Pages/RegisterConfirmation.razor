@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<PizzaStoreUser> UserManager
@inject IEmailSender<PizzaStoreUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>注册确认</PageTitle>

<h1>注册确认</h1>
<div class="row">
    <div class="col-md-4">
        <hr>
    </div>
</div>
<StatusMessage Message="@statusMessage" />

@if (emailConfirmationLink is not null)
{
    <p>
        当前此应用未配置真实的电子邮件发送服务，
        通常情况下，这会通过邮件发送: <a href="@emailConfirmationLink">点击这里确认您的账户</a>
    </p>
}
else
{
    <p>请检查您的电子邮件以确认账户。</p>
}

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "未找到与此电子邮箱关联的用户。";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // 添加真实的邮件发送服务后，应移除此代码
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }
}
