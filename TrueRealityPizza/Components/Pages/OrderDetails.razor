@page "/myorders/{orderId:int}"

@using System.Threading
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@attribute [Authorize]
@implements IDisposable
@rendermode InteractiveServer
@inject IRepository Repository


<PageTitle>TrueReality Pizza - 订单详情</PageTitle>
<div class="main">
	@if (invalidOrder)
	{
		<h2>无法加载订单</h2>
		<p>抱歉，无法加载此订单。</p>
	}
	else if (orderWithStatus is null)
	{
		<text>加载中...</text>
	}
	else
	{
		<div class="track-order">
			<div class="track-order-title">
				<h2>
					订单已于 @orderWithStatus.Order.CreatedTime.ToLongDateString() 下单
				</h2>
				<p class="ml-auto mb-0">
					状态: <strong>@orderWithStatus.StatusText</strong>
				</p>
			</div>
			<div class="track-order-body">
				<div class="track-order-details">
					<OrderReview Order="orderWithStatus.Order" />
				</div>

				<div class="track-order-map">
					 <Map Zoom="13" Markers="orderWithStatus?.MapMarkers" />
				</div>

			</div>
		</div>
	}
</div>

@code {
	[Parameter] public int OrderId { get; set; }

	[CascadingParameter]
	public HttpContext HttpContext { get; set;} = default!; 

	OrderWithStatus? orderWithStatus;
	bool invalidOrder;
	CancellationTokenSource? pollingCancellationToken;

	private Task pollingTask;

	protected override async Task OnParametersSetAsync()
	{
		// If we were already polling for a different order, stop doing so
		pollingCancellationToken?.Cancel();

		orderWithStatus = await Repository.GetOrderWithStatus(OrderId);

		// Start a new poll loop
		pollingTask = PollForUpdates();

		await base.OnParametersSetAsync();

	}

	private async Task PollForUpdates()
	{
		pollingCancellationToken = new CancellationTokenSource();
		while (!pollingCancellationToken.IsCancellationRequested)
		{

			try
			{
				invalidOrder = false;
				orderWithStatus = await Repository.GetOrderWithStatus(OrderId);
				await InvokeAsync(StateHasChanged);

				if (orderWithStatus.IsDelivered)
				{
					pollingCancellationToken.Cancel();
				}
				else
				{
					await Task.Delay(4000);
				}
			}
			catch (Exception ex)
			{
				invalidOrder = true;
				pollingCancellationToken.Cancel();
				Console.Error.WriteLine(ex);
				await InvokeAsync(StateHasChanged);

			}
		}

	}

	void IDisposable.Dispose()
	{
		pollingCancellationToken?.Cancel();
	}
}
